/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&mmv {
    time-to-max-speed-ms = <680>;
    acceleration-exponent = <2>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Y  &kp C  &kp L       &kp M       &kp K                                                        &kp Z  &kp F       &kp U                 &td MINUS COMMA  &kp DELETE  &none
&none  &kp I  &kp S  &hm LALT R  &hm LGUI T  &kp G                                                        &kp P  &hm RGUI N  &hm RALT E            &kp A            &kp O       &none
&none  &kp Q  &kp V  &kp W       &kp D       &kp J                   &none       &none  &none  &none      &kp B  &kp H       &td UNDERSCORE SLASH  &td EXCL DOT     &kp X       &none
                     &none       &none       &mt LC(LS(LALT)) SPACE  &sk LSHIFT  &none  &none  &sk RCTRL  &to 1  &none       &none
            >;
        };

        left_layer {
            bindings = <
&none  &kp ESC    &kp AT      &td LC(LG(LS(N4))) LS(N3)  &kp DLLR          &kp PRCNT                                      &kp CARET  &kp LS(COMMA)         &kp LS(DOT)            &kp SEMI  &kp DELETE  &none
&none  &kp TAB    &kp EQUAL   &kp LA(RBKT)               &kp LA(LS(RBKT))  &kp SQT                                        &kp BSLH   &kp LBRC              &kp RBRC               &kp PIPE  &kp ENTER   &none
&none  &kp TILDE  &kp LA(N3)  &kp LA(LBKT)               &kp LA(LS(LBKT))  &none      &none       &none  &none  &kp DQT   &kp LBKT   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RBKT  &to 3       &none
                              &none                      &none             &to 0      &sk LSHIFT  &none  &none  &sk RALT  &to 2      &none                 &none
            >;
        };

        right_layer {
            bindings = <
&none   &kp ESC    &kp ESC  &kp C_PP  &kp C_PREV  &kp C_NEXT                                        &kp LS(MINUS)  &kp MINUS     &kp N7         &kp N8     &kp N9  &trans
&none   &none      &none    &none     &kp TAB     &trans                                            &kp C_VOL_DN   &kp C_VOL_UP  &kp LS(EQUAL)  &kp EQUAL  &kp N4  &kp N5
&kp N6  &kp ENTER  &none    &none     &none       &none       &to 4  &kp AMPS  &kp SLASH  &kp STAR  &kp DOT        &none         &none          &kp N0     &kp N1  &kp N2
                            &kp N3    &trans      &none       &none  &none     &none      &to 0     &sk LGUI       &none         &none
            >;
        };

        tri_layer {
            bindings = <
&none  &kp ESC              &mwh SCROLL_LEFT  &mmv MOVE_UP    &mwh SCROLL_RIGHT  &hm H Q                                        &kp K_BACK  &kp LC(LS(TAB))  &kp RC(TAB)   &kp K_FORWARD  &kp BACKSPACE  &none
&none  &kp TAB              &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &kp DEL                                        &kp LEFT    &kp DOWN         &kp UP        &kp RIGHT      &kp ENTER      &none
&none  &td LG(GRAVE) GRAVE  &mkp RCLK         &mwh SCROLL_UP  &mwh SCROLL_DOWN   &trans   &none         &none  &none  &none     &mkp LCLK   &kp PG_DN        &kp K_VOL_DN  &trans         &trans         &none
                                              &none           &none              &to 0    &kp LEFT_WIN  &none  &none  &sk RALT  &to 1       &none            &none
            >;
        };

        bt {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                &trans  &trans  &trans      &trans      &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans                                &trans  &trans  &bt BT_PRV  &bt BT_NXT  &bt BT_CLR  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &to 0  &trans  &trans  &to 1
            >;
        };
    };
};
